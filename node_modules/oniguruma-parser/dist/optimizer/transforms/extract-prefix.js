"use strict";import{alternativeContainerTypes as c}from"../../parser/node-utils.js";import{createAlternative as u,createGroup as h,NodeTypes as n}from"../../parser/parse.js";const v={"*"({node:e}){if(!c.has(e.type)||e.alternatives.length<2)return;const t=[];let o=!1,s=0;for(;!o;){t[s]=e.alternatives[0].elements[s];for(const r of e.alternatives){const l=r.elements[s];if(!l||!f(l.type)||!p(l,t[s])){o=!0;break}}s++}if(t.pop(),!t.length)return;for(const r of e.alternatives)r.elements=r.elements.slice(t.length);const a=u();a.elements=[...t];const i=h();i.alternatives=e.alternatives,i.alternatives.every(r=>!r.elements.length)||a.elements.push(i),e.alternatives=[a]}};function f(e){return e===n.Assertion||e===n.Character||e===n.CharacterSet}function p(e,t){if(e.type!==t.type)return!1;if(e.type===n.Assertion||e.type===n.CharacterSet)return e.kind===t.kind&&e.negate===t.negate;if(e.type===n.Character)return e.value===t.value;throw new Error(`Unexpected node type "${e.type}"`)}export{v as extractPrefix,f as isAllowedSimpleType,p as isNodeEqual};
//# sourceMappingURL=extract-prefix.js.map
