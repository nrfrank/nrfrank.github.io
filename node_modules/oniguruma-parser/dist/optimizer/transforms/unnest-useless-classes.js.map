{
  "version": 3,
  "sources": ["../../../src/optimizer/transforms/unnest-useless-classes.js"],
  "sourcesContent": ["import {hasOnlyChild} from '../../parser/node-utils.js';\nimport {NodeCharacterClassKinds, NodeTypes} from '../../parser/parse.js';\n\n/**\nUnnest character classes when possible.\nSee also `unwrapNegationWrappers`.\n*/\nconst unnestUselessClasses = {\n  CharacterClass({node, parent, replaceWith, replaceWithMultiple}) {\n    const {kind, negate, elements} = node;\n    if (\n      // Don't use this to unwrap outermost classes; see `unwrapUselessClasses` for that\n      parent.type !== NodeTypes.CharacterClass ||\n      kind !== NodeCharacterClassKinds.union ||\n      !elements.length\n    ) {\n      return;\n    }\n    const firstEl = elements[0];\n    // Special case to unnest classes that are an only-kid of their parent, since it might flip\n    // `negate` on the parent; ex:\n    // `[[a]]` -> `[a]`; `[[^a]]` -> `[^a]`; `[^[a]]` -> `[^a]`; `[^[^a]]` -> `[a]`\n    if (hasOnlyChild(parent, {\n      type: NodeTypes.CharacterClass,\n      kind: NodeCharacterClassKinds.union,\n    })) {\n      parent.negate = parent.negate !== negate;\n      replaceWithMultiple(elements, {traverse: true});\n      return;\n    }\n    // Remainder of options apply only if the class is non-negated\n    if (negate) {\n      return;\n    }\n    // Unnest all kids into a union class\n    if (parent.kind === NodeCharacterClassKinds.union) {\n      replaceWithMultiple(elements, {traverse: true});\n    // Can unnest any one kid into an intersection class\n    // [TODO] After supporting `format` for classes in the parser, can \"unnest\" any number of kids\n    // into intersection by flipping this class's `format` from `'explicit'` to `'implicit'`,\n    // rather than replacing it\n    } else if (hasOnlyChild(node)) {\n      replaceWith(firstEl, {traverse: true});\n    }\n  },\n};\n\nexport {\n  unnestUselessClasses,\n};\n"],
  "mappings": "aAAA,OAAQ,gBAAAA,MAAmB,6BAC3B,OAAQ,2BAAAC,EAAyB,aAAAC,MAAgB,wBAMjD,MAAMC,EAAuB,CAC3B,eAAe,CAAC,KAAAC,EAAM,OAAAC,EAAQ,YAAAC,EAAa,oBAAAC,CAAmB,EAAG,CAC/D,KAAM,CAAC,KAAAC,EAAM,OAAAC,EAAQ,SAAAC,CAAQ,EAAIN,EACjC,GAEEC,EAAO,OAASH,EAAU,gBAC1BM,IAASP,EAAwB,OACjC,CAACS,EAAS,OAEV,OAEF,MAAMC,EAAUD,EAAS,CAAC,EAI1B,GAAIV,EAAaK,EAAQ,CACvB,KAAMH,EAAU,eAChB,KAAMD,EAAwB,KAChC,CAAC,EAAG,CACFI,EAAO,OAASA,EAAO,SAAWI,EAClCF,EAAoBG,EAAU,CAAC,SAAU,EAAI,CAAC,EAC9C,MACF,CAEID,IAIAJ,EAAO,OAASJ,EAAwB,MAC1CM,EAAoBG,EAAU,CAAC,SAAU,EAAI,CAAC,EAKrCV,EAAaI,CAAI,GAC1BE,EAAYK,EAAS,CAAC,SAAU,EAAI,CAAC,EAEzC,CACF,EAEA,OACER,KAAA",
  "names": ["hasOnlyChild", "NodeCharacterClassKinds", "NodeTypes", "unnestUselessClasses", "node", "parent", "replaceWith", "replaceWithMultiple", "kind", "negate", "elements", "firstEl"]
}
