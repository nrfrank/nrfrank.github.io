{
  "version": 3,
  "sources": ["../../src/optimizer/optimize.js"],
  "sourcesContent": ["import {toOnigurumaAst} from '../index.js';\nimport {generate} from '../generator/generate.js';\nimport {traverse} from '../traverser/traverse.js';\nimport {optimizations} from './optimizations.js';\n\n/**\nReturns an optimized Oniguruma pattern and flags.\n@param {string} pattern Oniguruma regex pattern.\n@param {{\n  flags?: string;\n  override?: {[key in import('./optimizations.js').OptimizationName]?: boolean};\n  rules?: {\n    captureGroup?: boolean;\n    singleline?: boolean;\n  };\n}} [options]\n@returns {{\n  pattern: string;\n  flags: string;\n}}\n*/\nfunction optimize(pattern, options) {\n  const opts = getOptions(options);\n  const ast = toOnigurumaAst(pattern, {\n    flags: opts.flags,\n    rules: opts.rules,\n  });\n  const active = Object.assign(getOptionalOptimizations(), opts.override);\n  Object.keys(active).forEach(key => {\n    if (!active[key]) {\n      delete active[key];\n    }\n  });\n  const names = Object.keys(active);\n  let optimized = {pattern};\n  let counter = 0;\n  do {\n    if (++counter > 200) {\n      throw new Error('Optimization exceeded maximum iterations; possible infinite loop');\n    }\n    pattern = optimized.pattern;\n    for (const name of names) {\n      traverse(ast, optimizations.get(name));\n    }\n    optimized = generate(ast);\n  // Continue until no further optimization progress is made\n  } while (pattern !== optimized.pattern);\n  return optimized;\n}\n\nfunction getOptions(options = {}) {\n  return {\n    flags: '',\n    override: {},\n    rules: {},\n    ...options,\n  };\n}\n\n/**\n@param {{\n  disable?: boolean;\n}} [options]\n@returns {\n  {[key in import('./optimizations.js').OptimizationName]: boolean}\n}\n*/\nfunction getOptionalOptimizations({disable} = {}) {\n  const obj = {};\n  for (const key of optimizations.keys()) {\n    obj[key] = !disable;\n  }\n  return obj;\n}\n\nexport {\n  getOptionalOptimizations,\n  optimize,\n};\n"],
  "mappings": "aAAA,OAAQ,kBAAAA,MAAqB,cAC7B,OAAQ,YAAAC,MAAe,2BACvB,OAAQ,YAAAC,MAAe,2BACvB,OAAQ,iBAAAC,MAAoB,qBAkB5B,SAASC,EAASC,EAASC,EAAS,CAClC,MAAMC,EAAOC,EAAWF,CAAO,EACzBG,EAAMT,EAAeK,EAAS,CAClC,MAAOE,EAAK,MACZ,MAAOA,EAAK,KACd,CAAC,EACKG,EAAS,OAAO,OAAOC,EAAyB,EAAGJ,EAAK,QAAQ,EACtE,OAAO,KAAKG,CAAM,EAAE,QAAQE,GAAO,CAC5BF,EAAOE,CAAG,GACb,OAAOF,EAAOE,CAAG,CAErB,CAAC,EACD,MAAMC,EAAQ,OAAO,KAAKH,CAAM,EAChC,IAAII,EAAY,CAAC,QAAAT,CAAO,EACpBU,EAAU,EACd,EAAG,CACD,GAAI,EAAEA,EAAU,IACd,MAAM,IAAI,MAAM,kEAAkE,EAEpFV,EAAUS,EAAU,QACpB,UAAWE,KAAQH,EACjBX,EAASO,EAAKN,EAAc,IAAIa,CAAI,CAAC,EAEvCF,EAAYb,EAASQ,CAAG,CAE1B,OAASJ,IAAYS,EAAU,SAC/B,OAAOA,CACT,CAEA,SAASN,EAAWF,EAAU,CAAC,EAAG,CAChC,MAAO,CACL,MAAO,GACP,SAAU,CAAC,EACX,MAAO,CAAC,EACR,GAAGA,CACL,CACF,CAUA,SAASK,EAAyB,CAAC,QAAAM,CAAO,EAAI,CAAC,EAAG,CAChD,MAAMC,EAAM,CAAC,EACb,UAAWN,KAAOT,EAAc,KAAK,EACnCe,EAAIN,CAAG,EAAI,CAACK,EAEd,OAAOC,CACT,CAEA,OACEP,KAAA,yBACAP,KAAA",
  "names": ["toOnigurumaAst", "generate", "traverse", "optimizations", "optimize", "pattern", "options", "opts", "getOptions", "ast", "active", "getOptionalOptimizations", "key", "names", "optimized", "counter", "name", "disable", "obj"]
}
