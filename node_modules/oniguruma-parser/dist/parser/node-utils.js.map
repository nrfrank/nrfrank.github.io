{
  "version": 3,
  "sources": ["../../src/parser/node-utils.js"],
  "sourcesContent": ["import {NodeCharacterSetKinds, NodeTypes} from './parse.js';\n\nconst alternativeContainerTypes = new Set([\n  NodeTypes.AbsentFunction,\n  NodeTypes.CapturingGroup,\n  NodeTypes.Group,\n  NodeTypes.LookaroundAssertion,\n  NodeTypes.Pattern,\n]);\n\nconst atomicTypes = new Set([\n  NodeTypes.Assertion,\n  NodeTypes.Backreference,\n  NodeTypes.Character,\n  NodeTypes.CharacterClass,\n  NodeTypes.CharacterSet,\n  NodeTypes.Directive,\n]);\n\nconst quantifiableTypes = new Set([\n  NodeTypes.AbsentFunction,\n  NodeTypes.Backreference,\n  NodeTypes.CapturingGroup,\n  NodeTypes.Character,\n  NodeTypes.CharacterClass,\n  NodeTypes.CharacterSet,\n  NodeTypes.Group,\n  NodeTypes.Quantifier,\n  NodeTypes.Subroutine,\n]);\n\n// Character set kinds that can appear inside and outside of character classes, and can be inverted\n// by setting `negate`. Some but not all of those excluded use `variableLength: true`\nconst universalCharacterSetKinds = new Set([\n  NodeCharacterSetKinds.digit,\n  NodeCharacterSetKinds.hex,\n  NodeCharacterSetKinds.posix,\n  NodeCharacterSetKinds.property,\n  NodeCharacterSetKinds.space,\n  NodeCharacterSetKinds.word,\n]);\n\nfunction hasOnlyChild(node, props) {\n  // [TODO] Add support for nodes with `alternatives`; look for `elements` within the first alt\n  // after checking that there's only one alt\n  if (!node.elements) {\n    throw new Error('Expected node with elements');\n  }\n  if (node.elements.length !== 1) {\n    return false;\n  }\n  const kid = node.elements[0];\n  return !props || Object.keys(props).every(key => props[key] === kid[key]);\n}\n\nexport {\n  alternativeContainerTypes,\n  atomicTypes,\n  hasOnlyChild,\n  quantifiableTypes,\n  universalCharacterSetKinds,\n};\n"],
  "mappings": "aAAA,OAAQ,yBAAAA,EAAuB,aAAAC,MAAgB,aAE/C,MAAMC,EAA4B,IAAI,IAAI,CACxCD,EAAU,eACVA,EAAU,eACVA,EAAU,MACVA,EAAU,oBACVA,EAAU,OACZ,CAAC,EAEKE,EAAc,IAAI,IAAI,CAC1BF,EAAU,UACVA,EAAU,cACVA,EAAU,UACVA,EAAU,eACVA,EAAU,aACVA,EAAU,SACZ,CAAC,EAEKG,EAAoB,IAAI,IAAI,CAChCH,EAAU,eACVA,EAAU,cACVA,EAAU,eACVA,EAAU,UACVA,EAAU,eACVA,EAAU,aACVA,EAAU,MACVA,EAAU,WACVA,EAAU,UACZ,CAAC,EAIKI,EAA6B,IAAI,IAAI,CACzCL,EAAsB,MACtBA,EAAsB,IACtBA,EAAsB,MACtBA,EAAsB,SACtBA,EAAsB,MACtBA,EAAsB,IACxB,CAAC,EAED,SAASM,EAAaC,EAAMC,EAAO,CAGjC,GAAI,CAACD,EAAK,SACR,MAAM,IAAI,MAAM,6BAA6B,EAE/C,GAAIA,EAAK,SAAS,SAAW,EAC3B,MAAO,GAET,MAAME,EAAMF,EAAK,SAAS,CAAC,EAC3B,MAAO,CAACC,GAAS,OAAO,KAAKA,CAAK,EAAE,MAAME,GAAOF,EAAME,CAAG,IAAMD,EAAIC,CAAG,CAAC,CAC1E,CAEA,OACER,KAAA,0BACAC,KAAA,YACAG,KAAA,aACAF,KAAA,kBACAC,KAAA",
  "names": ["NodeCharacterSetKinds", "NodeTypes", "alternativeContainerTypes", "atomicTypes", "quantifiableTypes", "universalCharacterSetKinds", "hasOnlyChild", "node", "props", "kid", "key"]
}
