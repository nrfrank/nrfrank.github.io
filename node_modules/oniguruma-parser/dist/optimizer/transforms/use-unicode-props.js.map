{
  "version": 3,
  "sources": ["../../../src/optimizer/transforms/use-unicode-props.js"],
  "sourcesContent": ["import {createUnicodeProperty, NodeCharacterSetKinds} from '../../parser/parse.js';\nimport {isRange} from './use-shorthands.js';\n\n/**\nUse Unicode properties when possible.\n- `\\p{Any}` from `[0-\\x{10FFFF}]`\n- `\\p{Cc}` from POSIX `\\p{cntrl}`, `[[:cntrl:]]`\nSee also `useShorthands`.\n*/\nconst useUnicodeProps = {\n  CharacterSet({node, root, replaceWith}) {\n    const {kind, negate, value} = node;\n    let newNode;\n    if (\n      kind === NodeCharacterSetKinds.posix &&\n      value === 'cntrl' &&\n      // [TODO] Also need to check whether this flag is set in local context, when the parser\n      // supports this flag on mode modifiers\n      !root.flags.posixIsAscii\n    ) {\n      newNode = createUnicodeProperty('Cc', {negate});\n    }\n\n    if (newNode) {\n      replaceWith(newNode);\n    }\n  },\n\n  CharacterClassRange({node, replaceWith}) {\n    if (isRange(node, 0, 0x10FFFF)) {\n      replaceWith(createUnicodeProperty('Any'));\n    }\n  },\n};\n\nexport {\n  useUnicodeProps,\n};\n"],
  "mappings": "aAAA,OAAQ,yBAAAA,EAAuB,yBAAAC,MAA4B,wBAC3D,OAAQ,WAAAC,MAAc,sBAQtB,MAAMC,EAAkB,CACtB,aAAa,CAAC,KAAAC,EAAM,KAAAC,EAAM,YAAAC,CAAW,EAAG,CACtC,KAAM,CAAC,KAAAC,EAAM,OAAAC,EAAQ,MAAAC,CAAK,EAAIL,EAC9B,IAAIM,EAEFH,IAASN,EAAsB,OAC/BQ,IAAU,SAGV,CAACJ,EAAK,MAAM,eAEZK,EAAUV,EAAsB,KAAM,CAAC,OAAAQ,CAAM,CAAC,GAG5CE,GACFJ,EAAYI,CAAO,CAEvB,EAEA,oBAAoB,CAAC,KAAAN,EAAM,YAAAE,CAAW,EAAG,CACnCJ,EAAQE,EAAM,EAAG,OAAQ,GAC3BE,EAAYN,EAAsB,KAAK,CAAC,CAE5C,CACF,EAEA,OACEG,KAAA",
  "names": ["createUnicodeProperty", "NodeCharacterSetKinds", "isRange", "useUnicodeProps", "node", "root", "replaceWith", "kind", "negate", "value", "newNode"]
}
