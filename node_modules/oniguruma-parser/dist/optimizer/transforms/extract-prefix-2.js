"use strict";import{isAllowedSimpleType as A,isNodeEqual as I}from"./extract-prefix.js";import{alternativeContainerTypes as B}from"../../parser/node-utils.js";import{createAlternative as h,createGroup as N}from"../../parser/parse.js";const C={"*"({node:r}){if(!B.has(r.type))return;const s=2,l=r.alternatives.length;if(l<s*2||l%s)return;const f=[...r.alternatives.slice(0,s).map(e=>e.elements)],i=Array.from({length:s},e=>[]),o=Array(s).fill(!1),v=Math.max(...f.map(e=>e.length));for(let e=0;e<v;e++)for(let t=0;t<s;t++)if(!o[t]){const n=f[t][e];!n||!A(n.type)||!G(n,r.alternatives,{prefixI:t,nodeI:e,numDiffPrefixes:s})?o[t]=!0:i[t].push(n)}if(!i.some(e=>e.length))return;const a=[];let p=0;for(let e=0;e<l;e++){const t=h();t.elements=r.alternatives[e].elements.slice(i[p].length),a.push(t),p=p<s-1?p+1:0}for(let e=0;e<l/s;e++){const t=a.slice(e*s,e*s+s);for(let n=1;n<t.length;n++){const y=t[n].elements;if(y.length!==t[0].elements.length||!y.every((g,d)=>A(g.type)&&I(g,t[0].elements[d])))return}}const c=h(),m=N(),x=[];for(let e=0;e<s;e++){const t=h();t.elements=i[e],x.push(t)}m.alternatives=x,c.elements.push(m);const u=N();u.alternatives=a.filter((e,t)=>t%s),u.alternatives.every(e=>!e.elements.length)?r.alternatives=m.alternatives:(c.elements.push(u),r.alternatives=[c])}};function G(r,s,{prefixI:l,nodeI:f,numDiffPrefixes:i}){for(let o=l;o<s.length;o+=i){const a=s[o].elements[f];if(!a||!I(a,r))return!1}return!0}export{C as extractPrefix2};
//# sourceMappingURL=extract-prefix-2.js.map
