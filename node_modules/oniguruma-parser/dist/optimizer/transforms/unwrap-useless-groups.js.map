{
  "version": 3,
  "sources": ["../../../src/optimizer/transforms/unwrap-useless-groups.js"],
  "sourcesContent": ["import {atomicTypes, quantifiableTypes} from '../../parser/node-utils.js';\nimport {NodeTypes} from '../../parser/parse.js';\n\n/**\nUnwrap nonbeneficial noncapturing and atomic groups.\n*/\nconst unwrapUselessGroups = {\n  Group({node, parent, replaceWithMultiple}) {\n    const {alternatives, atomic, flags} = node;\n    if (alternatives.length > 1 || parent.type === NodeTypes.Quantifier) {\n      return;\n    }\n    const els = alternatives[0].elements;\n    let unwrap = false;\n\n    if (atomic) {\n      if (els.every(({type}) => atomicTypes.has(type))) {\n        unwrap = true;\n      }\n    } else if (flags) {\n      // Rely on `removeUselessFlags`, then the group can be unwrapped in a subsequent pass\n    } else {\n      unwrap = true;\n    }\n\n    if (unwrap) {\n      replaceWithMultiple(els, {traverse: true});\n    }\n  },\n\n  Quantifier({node}) {\n    if (node.element.type !== NodeTypes.Group) {\n      return;\n    }\n    const quantifiedGroup = node.element;\n    if (quantifiedGroup.alternatives.length > 1) {\n      return;\n    }\n    const groupKids = quantifiedGroup.alternatives[0].elements;\n    if (groupKids.length !== 1) {\n      return;\n    }\n    const candidate = groupKids[0];\n    if (\n      !quantifiableTypes.has(candidate.type) ||\n      (quantifiedGroup.atomic && !atomicTypes.has(candidate.type)) ||\n      quantifiedGroup.flags\n    ) {\n      return;\n    }\n    // Make the only child of the group the new element of the quantifier\n    node.element = candidate;\n  },\n};\n\nexport {\n  unwrapUselessGroups,\n};\n"],
  "mappings": "aAAA,OAAQ,eAAAA,EAAa,qBAAAC,MAAwB,6BAC7C,OAAQ,aAAAC,MAAgB,wBAKxB,MAAMC,EAAsB,CAC1B,MAAM,CAAC,KAAAC,EAAM,OAAAC,EAAQ,oBAAAC,CAAmB,EAAG,CACzC,KAAM,CAAC,aAAAC,EAAc,OAAAC,EAAQ,MAAAC,CAAK,EAAIL,EACtC,GAAIG,EAAa,OAAS,GAAKF,EAAO,OAASH,EAAU,WACvD,OAEF,MAAMQ,EAAMH,EAAa,CAAC,EAAE,SAC5B,IAAII,EAAS,GAETH,EACEE,EAAI,MAAM,CAAC,CAAC,KAAAE,CAAI,IAAMZ,EAAY,IAAIY,CAAI,CAAC,IAC7CD,EAAS,IAEFF,IAGTE,EAAS,IAGPA,GACFL,EAAoBI,EAAK,CAAC,SAAU,EAAI,CAAC,CAE7C,EAEA,WAAW,CAAC,KAAAN,CAAI,EAAG,CACjB,GAAIA,EAAK,QAAQ,OAASF,EAAU,MAClC,OAEF,MAAMW,EAAkBT,EAAK,QAC7B,GAAIS,EAAgB,aAAa,OAAS,EACxC,OAEF,MAAMC,EAAYD,EAAgB,aAAa,CAAC,EAAE,SAClD,GAAIC,EAAU,SAAW,EACvB,OAEF,MAAMC,EAAYD,EAAU,CAAC,EAE3B,CAACb,EAAkB,IAAIc,EAAU,IAAI,GACpCF,EAAgB,QAAU,CAACb,EAAY,IAAIe,EAAU,IAAI,GAC1DF,EAAgB,QAKlBT,EAAK,QAAUW,EACjB,CACF,EAEA,OACEZ,KAAA",
  "names": ["atomicTypes", "quantifiableTypes", "NodeTypes", "unwrapUselessGroups", "node", "parent", "replaceWithMultiple", "alternatives", "atomic", "flags", "els", "unwrap", "type", "quantifiedGroup", "groupKids", "candidate"]
}
