{
  "version": 3,
  "sources": ["../../../src/optimizer/transforms/alternation-to-class.js"],
  "sourcesContent": ["import {alternativeContainerTypes, universalCharacterSetKinds} from '../../parser/node-utils.js';\nimport {createAlternative, createCharacterClass, NodeTypes} from '../../parser/parse.js';\n\n/**\nUse character classes for adjacent alternatives with single-length values.\n*/\nconst alternationToClass = {\n  '*'({node}) {\n    if (!alternativeContainerTypes.has(node.type)) {\n      return;\n    }\n    const newAlts = [];\n    let ccNodes = [];\n    for (const alt of node.alternatives) {\n      const kid = alt.elements[0];\n      if (\n        alt.elements.length === 1 &&\n        ( kid.type === NodeTypes.Character ||\n          kid.type === NodeTypes.CharacterClass ||\n          (kid.type === NodeTypes.CharacterSet && universalCharacterSetKinds.has(kid.kind))\n        )\n      ) {\n        ccNodes.push(kid);\n      } else {\n        if (ccNodes.length) {\n          newAlts.push(createAlternativeWithCombinedNodes(ccNodes));\n          ccNodes = [];\n        }\n        newAlts.push(alt);\n      }\n    }\n    if (ccNodes.length) {\n      newAlts.push(createAlternativeWithCombinedNodes(ccNodes));\n    }\n    node.alternatives = newAlts;\n  },\n};\n\nfunction createAlternativeWithCombinedNodes(nodes) {\n  const alt = createAlternative();\n  let node = nodes[0];\n  if (nodes.length > 1) {\n    const cc = createCharacterClass();\n    cc.elements = nodes;\n    node = cc;\n  }\n  if (node) {\n    alt.elements.push(node);\n  }\n  return alt;\n}\n\nexport {\n  alternationToClass,\n};\n"],
  "mappings": "aAAA,OAAQ,6BAAAA,EAA2B,8BAAAC,MAAiC,6BACpE,OAAQ,qBAAAC,EAAmB,wBAAAC,EAAsB,aAAAC,MAAgB,wBAKjE,MAAMC,EAAqB,CACzB,IAAI,CAAC,KAAAC,CAAI,EAAG,CACV,GAAI,CAACN,EAA0B,IAAIM,EAAK,IAAI,EAC1C,OAEF,MAAMC,EAAU,CAAC,EACjB,IAAIC,EAAU,CAAC,EACf,UAAWC,KAAOH,EAAK,aAAc,CACnC,MAAMI,EAAMD,EAAI,SAAS,CAAC,EAExBA,EAAI,SAAS,SAAW,IACtBC,EAAI,OAASN,EAAU,WACvBM,EAAI,OAASN,EAAU,gBACtBM,EAAI,OAASN,EAAU,cAAgBH,EAA2B,IAAIS,EAAI,IAAI,GAGjFF,EAAQ,KAAKE,CAAG,GAEZF,EAAQ,SACVD,EAAQ,KAAKI,EAAmCH,CAAO,CAAC,EACxDA,EAAU,CAAC,GAEbD,EAAQ,KAAKE,CAAG,EAEpB,CACID,EAAQ,QACVD,EAAQ,KAAKI,EAAmCH,CAAO,CAAC,EAE1DF,EAAK,aAAeC,CACtB,CACF,EAEA,SAASI,EAAmCC,EAAO,CACjD,MAAMH,EAAMP,EAAkB,EAC9B,IAAII,EAAOM,EAAM,CAAC,EAClB,GAAIA,EAAM,OAAS,EAAG,CACpB,MAAMC,EAAKV,EAAqB,EAChCU,EAAG,SAAWD,EACdN,EAAOO,CACT,CACA,OAAIP,GACFG,EAAI,SAAS,KAAKH,CAAI,EAEjBG,CACT,CAEA,OACEJ,KAAA",
  "names": ["alternativeContainerTypes", "universalCharacterSetKinds", "createAlternative", "createCharacterClass", "NodeTypes", "alternationToClass", "node", "newAlts", "ccNodes", "alt", "kid", "createAlternativeWithCombinedNodes", "nodes", "cc"]
}
